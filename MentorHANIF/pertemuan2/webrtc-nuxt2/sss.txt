<template>
  <div>
    <v-app-bar app></v-app-bar>
    <v-subheader>Group meeting</v-subheader>
    <v-text-field label="Room Name" v-model="inputId"></v-text-field>
    <v-btn @click="joinn">Join Room</v-btn>
    <v-bottom-navigation v-model="value" app>
      <v-btn value="recent">
        <span>Recent</span>

        <v-icon>mdi-history</v-icon>
      </v-btn>

      <v-btn value="favorites">
        <span>Favorites</span>

        <v-icon>mdi-heart</v-icon>
      </v-btn>

      <v-btn value="nearby">
        <span>Nearby</span>

        <v-icon>mdi-map-marker</v-icon>
      </v-btn>
    </v-bottom-navigation>
  </div>
</template>
<script>
export default {
  data() {
    return {
      inputId: "",
      value:"",
    };
  },
  methods: {
    joinn(){
      this.$router.push(`/room?roomId=${this.inputId}`)
      console.log("p")
    }
  },
};
</script>
<style>
#cameraView {
  transform: rotateY(180deg);
  -webkit-transform: rotateY(180deg); /* Safari and Chrome */
  -moz-transform: rotateY(180deg); /* Firefox */
}
</style>
<template>
  <div>
    <v-app-bar app>
      <v-btn icon @click="$router.push('/')">
        <v-icon> mdi-arrow-left </v-icon>
      </v-btn></v-app-bar
    >
    <v-container>
      <v-row class="justify-center">

  <v-col cols="4" md="3" lg="3" v-for="peer in peers" :key="peer.peerId" class="">
      <video style="max-height:80%;max-width:100%;"
        :id="peer.peerId"
        :peerId="peer.peerId"
        :srcObject.prop="peer.stream"
        autoplay
        playsinline
      ></video>
      <span>{{ peer.peerId }}</span>

  </v-col>
  <v-col cols="12" lg="12" md="12" class="d-flex justify-center">

    <video rounded-lg
      id="my-video"
      :srcObject.prop="localStream"
      autoplay
      muted
      playsinline
    >p</video>
  </v-col>
        <v-col cols="12" lg="12" class="d-flex justify-center">
    <v-btn @click="startVoice"  fab  class="mx-2"><v-icon size="30">mdi-microphone-outline</v-icon></v-btn>
    <v-btn @click="startVideo"  fab  class="mx-2"><v-icon size="30">mdi-video-outline</v-icon></v-btn>
    <v-btn @click="startDisplay"  fab  class="mx-2"><v-icon size="30">mdi-monitor-share</v-icon></v-btn>
        </v-col>
      </v-row>
    </v-container>

    <p>Your Peer ID: {{ peerId }}</p>

  </div>
</template>
<script>
import Peer from "skyway-js";

export default {
  data() {
    return {
      localStream: null,
      peerId: "",
      inputId: "",
      peer: null,
      room: null,
      peers: [],
    };
  },
  mounted() {
    this.peer = new Peer({
      key: "abe02cb1-4e86-49d6-87f0-d682a3fd6a5f",
      debug: 3,
    });
    this.peer.on("open", (peerId) => {
      this.peerId = peerId;
    });
  },
  methods: {
    startDisplay() {
      if (!navigator.mediaDevices.getDisplayMedia) {
        alert(`Error: Your device cannot use this type of stream.`);
        return;
      }
      navigator.mediaDevices
        .getDisplayMedia()
        .then((stream) => {
          this.localStream = stream;
        })
        .then(this.joinRoom)
        .catch((err) => {
          alert(`Error: Your device cannot use this type of stream.`);
        });
    },
    startVoice() {
      navigator.mediaDevices
        .getUserMedia({ video: false, audio: true })
        .then((stream) => {
          this.localStream = stream;
        })
        .then(this.joinRoom)
        .catch((err) => {
          alert(`Error: Your device cannot use this type of stream.`);
        });
    },
    startVideo() {
      navigator.mediaDevices
        .getUserMedia({ video: true, audio: true })
        .then((stream) => {
          this.localStream = stream;
        })
        .then(this.joinRoom)
        .catch((err) => {
          alert(`Error: Your device cannot use this type of stream.`);
        });
    },
    joinRoom() {
      const peer = this.peer;
      if (this.room) {
        this.room.replaceStream(this.localStream);
        return;
      }
      this.room = peer.joinRoom(this.$route.query.roomId, {
        mode: "mesh",
        stream: this.localStream,
      });

      this.room.once("open", () => {
        console.log("=== You joined ===\n");
      });
      this.room.on("peerJoin", (peerId) => {
        console.log(`=== ${peerId} joined ===\n`);
      });

      this.room.on("peerLeave", (peerId) => {
        this.peers = this.peers.filter((p) => p.peerId !== peerId);
      });

      this.room.on("stream", async (stream) => {
        this.peers = this.peers.filter((p) => p.peerId !== stream.peerId);
        this.peers.push({ peerId: stream.peerId, stream: stream });
      });
    },
  },
  destroyed() {
    if (this.room) this.room.close();
    if (this.peer) this.peer.destroy();
  },
};
</script>
<style>
#cameraView {
  transform: rotateY(180deg);
  -webkit-transform: rotateY(180deg); /* Safari and Chrome */
  -moz-transform: rotateY(180deg); /* Firefox */
}
#my-video {
  border-radius: 10px;
  /* max-width: 50vw;
  max-height: 30vh; */
}
</style>
